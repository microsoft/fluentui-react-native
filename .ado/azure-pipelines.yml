pr:
  - master

variables:
  CI: true

jobs:
  # Dedicated task to build and bundle JS code, including jest tests, snapshot testing, and linting, because these things can be super
  # time consuming they don't need to run on every CI pass, instead do a dedicated JS loop to make the platform specific tests start quicker
  - job: BuildAndBundle
    displayName: Build, test, and bundle JavaScript
    pool:
      vmImage: 'ubuntu-latest'
    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

    steps:
      - checkout: self
        persistCredentials: true

      - template: templates/setup-repo.yml

      - script: |
          yarn buildci
        displayName: 'yarn buildci'

      - script: |
          yarn checkchange
        displayName: 'check change'

      - script: |
          yarn check-for-changed-files
        displayName: 'verify API and Ensure Changed Files'

  # Windows bundling and end to end testing
  - job: WindowsPR
    displayName: Windows PR
    pool:
      vmImage: 'windows-2019'
    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them

    # The "displayName" of all steps that execute a command within our repo (such as 'yarn build') start lowercase to make it
    # easier to differentiate in-repo scripts from environmental setup. This makes it easier to understand CI pipeline results.
    steps:
      - checkout: self
        persistCredentials: true

      # yarn and minimal build to get set up
      - template: templates/setup-repo-min-build.yml

      # bundle windows adn do end to end tests
      - template: templates/e2e-testing-uwp.yml

  # Win32 bundling and end to end testing
  - job: Win32PR
    displayName: Win32 PR
    pool:
      vmImage: 'windows-2019'
    timeoutInMinutes: 60
    cancelTimeoutInMinutes: 5

    steps:
      - checkout: self
        persistCredentials: true

      # yarn and minimal build to get set up
      - template: templates/setup-repo-min-build.yml

      # bundle win32 and do end to end tests
      - template: templates/e2e-testing-win32.yml

  - job: ApplePR
    displayName: Apple PR
    pool:
      vmImage: 'macos-10.15'
      demands: ['xcode', 'sh', 'npm']
    timeoutInMinutes: 60 # how long to run the job before automatically cancelling
    cancelTimeoutInMinutes: 5 # how much time to give 'run always even if cancelled tasks' before killing them
    strategy:
      maxParallel: 4
      matrix:
        ios:
          relative_directory: 'ios'
          xcode_sdx: 'ios'
          xcode_configuration: 'Debug'
          xcode_workspacePath: 'apps/ios/src/FluentUITester.xcworkspace'
          xcode_scheme: 'FluentUITester'
          xcode_actions: 'build'
          xcode_useXcpretty: true
          xcode_destination: 'platform=iOS Simulator,OS=latest,name=iPhone 11'
        macos:
          relative_directory: 'macos'
          xcode_sdx: 'macosx'
          xcode_configuration: 'Debug'
          xcode_workspacePath: 'apps/macos/src/FluentUITester.xcworkspace'
          xcode_scheme: 'FluentUITester-macOS'
          xcode_actions: 'build'
          xcode_useXcpretty: true
          xcode_destination: 'platform=macOS,arch=x86_64'

    steps:
      - checkout: self
        persistCredentials: true

      # Clean Derived Data
      - script: |
          rm -rf $(Build.Repository.LocalPath)/DerivedData
        displayName: 'Clean DerivedData'

      - script: |
          sudo gem install cocoapods
        displayName: 'Install Cocoapods Environment'

      - template: templates/setup-repo-min-build.yml

      - script: |
          yarn bundle
        workingDirectory: apps/$(relative_directory)
        displayName: 'yarn bundle $(relative_directory)'

      # Select proper XCode version
      - template: templates/apple-xcode-select.yml

      - template: templates/apple-xcode-build.yml
        parameters:
          relative_directory: $(relative_directory)
          xcode_sdx: $(xcode_sdx)
          xcode_configuration: $(xcode_configuration)
          xcode_workspacePath: $(xcode_workspacePath)
          xcode_scheme: $(xcode_scheme)
          xcode_actions: $(xcode_actions)
          xcode_useXcpretty: $(xcode_useXcpretty)
          xcode_destination: $(xcode_destination)
