steps:
  # Creates a variable that determines whether the previous build tasks succeeded.
  # Usage: We want the tasks that generate reports to run for both passing/failing E2E testing tasks. In order to do so, we need to make
  # those reporting tasks run even on when certain previous tasks fail. This variable allows us to differentiate build failures from
  # E2E testing failures. Thus, if this variable != "Success", we know the build failed, and to not run the reporting tasks.
  - task: PowerShell@2
    inputs:
      targetType: "inline"
      script: |
        Write-Host "##vso[task.setvariable variable=task.Build.status]Success"
    condition: succeeded()
    displayName: "Create success build variable"

  - task: DownloadSecureFile@1
    name: UwpCertificate
    inputs:
      secureFile: FluentTester_TemporaryKey.pfx
    displayName: "Download UWP App Certificate"

  - powershell: |
      certutil –f –p password –importpfx $(UwpCertificate.secureFilePath)
    displayName: "Add Certificate to Personal Store"

  - task: DownloadSecureFile@1
    name: AzureCredentials
    inputs:
      secureFile: "installcredprovider.ps1"
    displayName: "Download Azure Credentials Plugin for NuGet"

  - task: PowerShell@2
    inputs:
      filePath: $(AzureCredentials.secureFilePath)
      arguments: "-AddNetfx -Force"
    displayName: "Install Azure Credentials Plugin for NuGet"

  - script: |
      yarn e2etest
    workingDirectory: apps\win32
    displayName: "run Win32 E2E tests"
    condition: and (succeededOrFailed(), eq(variables['task.Build.status'], 'success'))

  - template: e2e-publish-artifacts.yml
    parameters:
      applicationType: win32
      platform: win32
      buildArtifacts: variables['task.Build.status']

  # Performance Reasons
  - powershell: |
      Start-Sleep -Seconds 30
    displayName: "Performance Delay"
    condition: and (succeededOrFailed(), eq(variables['task.Build.status'], 'success'))

  # Necessary for Appium server to run twice (for UWP and Win32). One instance at a time
  - powershell: |
      Stop-Process -Name node
    displayName: "Kill node Process"
    condition: and (succeededOrFailed(), eq(variables['task.Build.status'], 'success'))

  - script: |
      yarn windows
    workingDirectory: apps\windows
    displayName: "run UWP app"

  # Wait for app to launch. A workaround to avoid WinAppDriver error: Failed to locate opened application window with appId
  - powershell: |
      Start-Sleep -Seconds 90
    displayName: "Wait for app to launch"

  # Kill FluentTester, leave server up and running. This was the only way I could get the server continuously running
  # as a separate process.
  - powershell: |
      Stop-Process -Name FluentTester
    displayName: "Kill FluentTester Process"

  - script: |
      yarn e2etest
    workingDirectory: apps\windows
    condition: succeeded()
    displayName: "run UWP E2E tests"

  # The following conditions (using buildSuccess variable) make it so these tasks run even if the E2E tasks fails,
  # but not if the initial repo build steps fail.

  - template: e2e-publish-artifacts.yml
    parameters:
      applicationType: UWP
      platform: windows
      buildArtifacts: variables['task.Build.status']
