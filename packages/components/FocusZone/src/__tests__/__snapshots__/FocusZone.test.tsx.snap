// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FocusZone No Props No children 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateStopAtEnds"
/>
`;

exports[`FocusZone No Props One child 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateStopAtEnds"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone No Props Three children 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateStopAtEnds"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone No Props Two children 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateStopAtEnds"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone With Props All Props 1`] = `
<RCTFocusZone
  disabled={false}
  focusZoneDirection="vertical"
  navigateAtEnd="NavigateStopAtEnds"
  use2DNavigation={true}
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone With Props defaultTabbableElement Prop 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateStopAtEnds"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone With Props disabled Prop 1`] = `
<RCTFocusZone
  disabled={true}
  navigateAtEnd="NavigateStopAtEnds"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone With Props focusZoneDirection Prop 1`] = `
<RCTFocusZone
  focusZoneDirection="bidirectional"
  navigateAtEnd="NavigateStopAtEnds"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone With Props isCircularNavigation Prop 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateWrap"
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;

exports[`FocusZone With Props use2DNavigation Prop 1`] = `
<RCTFocusZone
  navigateAtEnd="NavigateStopAtEnds"
  use2DNavigation={true}
>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
  <View
    accessibilityRole="button"
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onKeyDown={[Function]}
    onKeyUp={[Function]}
    onMouseEnter={[Function]}
    onMouseLeave={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          undefined,
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        button
      </Text>
    </View>
  </View>
</RCTFocusZone>
`;
