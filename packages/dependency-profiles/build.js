// @ts-check

const path = require('path');

const OUTPUT_FILE = `${__dirname}/src/index.js`;

const CAPABILITY_MAP = {
  '@office-iss/react-native-win32': 'core-win32',
  'react-native': 'core',
  'react-native-macos': 'core-macos',
  'react-native-windows': 'core-windows',
  'react-native-svg': 'svg',
  // core-android?
  // core-ios?
  // react?
};

const fs = require('fs');
const semver = require('semver');
const { getAllPackageJsonFiles } = require('workspace-tools');
const { name: thisPackageName, devDependencies } = require('./package.json');

/**
 * Returns the contents of the file at specified path.
 * @param {string} path
 * @returns {string}
 */
function readFile(path) {
  return fs.readFileSync(path, { encoding: 'utf-8' });
}

const packages = {};

// Look for `react-native` and out-of-tree platforms
for (const [name, capability] of Object.entries(CAPABILITY_MAP)) {
  if (name in devDependencies) {
    packages[capability] = { name, version: devDependencies[name] };
  }
}

const workspacePackages = getAllPackageJsonFiles(__dirname);
for (const manifestPath of workspacePackages.sort()) {
  const { name, version, private, devOnly } = JSON.parse(readFile(manifestPath));
  if (private || name === thisPackageName) {
    continue;
  }

  if (!name) {
    throw new Error(`${manifestPath} is missing 'name'`);
  }
  if (!version) {
    throw new Error(`${manifestPath} is missing 'version'`);
  }

  packages[name] = { name, version, devOnly };
}

let profiles;

profiles = {
  [`latest`]: packages,
};

const source = [
  `// This file was generated by '${path.basename(__filename)}'`,
  '/* eslint-disable */',
  `module.exports = ${JSON.stringify(profiles, undefined, 2)};`,
  '',
].join('\n');

if (readFile(OUTPUT_FILE) !== source) {
  fs.writeFileSync(OUTPUT_FILE, source);
} else {
  console.log('âœ¨  Already up to date');
}
